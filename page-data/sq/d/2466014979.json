{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"fd4b06ba-1c2b-542d-aec7-ff4e9ee3ebad","frontmatter":{"title":"Endings","date":"February 24, 2022"},"fields":{"slug":"2022-02-23-endings"},"html":"<p>2021 was a pretty mixed bag as far as years go. It was one of those periods where time was hard to keep track of and unreal at times. Looking back to the February of 2021 my life is almost unrecognisable, was I really teaching 7-18 year olds full time as a professional?</p>\n<p>I'd finished my undergraduate degree in July of 2020 and opted for a postgraduate teaching degree starting that same August. Despite the pandemic looming over this year I had a short term plan for the future and was in a relationship for the first time in a while.</p>\n<p>Things just fell in place from this point onwards, I was in the (un)?forunate position of working in person as a key worker and was in a solid routine of not so nobly educating future generations. My relationship evolved into definitively the healthiest one to date and our plans for the future were so aligned it seemed almost fated. As a self-aware slacker at university the fact I had managed to shift to this profession as well as applying for top-tier graduate schemes was a proof of growth I did not give myself enough credit for.</p>\n<p>It's incredibly easy to look back on times and realise they were the best of them but almost impossible to realise that in the moment. Often I have dreams of returning to previous stages of my life thinking \"what if I did this instead?\" and it is only in these past few difficult months that I understand those reflections and the changes they inspire mean more than if life offered you do-overs.</p>\n<p>Fast-forward to the present and I am employed in the career I have been aiming for since I was in my teens, software engineering, and at a company as notable as Accenture at that. Up until a few months ago everything in my life was where I wanted it to be, I was about to move to London where my job is based with someone I genuinely saw a future with. Despite losing my faith well before taking GCSEs I still view some circumstances as God needing to take me down a peg - maybe that's to shift blame or maybe it's to make accepting events easier.</p>\n<p>This relationship was not to last and the timing of its end was <em>not ideal</em>. One week after a contract for a shared car was to start and one before I was to move into a shared flat. Devastating is still putting it lightly yet it'll do here. My plans for the future were demolished and I didn't know how I was supposed to move forward. Past me would have spiralled into incredibly unhealthy coping mechanisms and lost myself to wallowing but I suprised even myself with how I dealt with this massive change.</p>\n<p>I surrounded myself with a support network I don't think I will ever take for granted and focused on little improvements over time; it started with taking up something I've wanted to for a long time - learning how to play the piano. Gradually I added more to fill the times in the day that would have been spent with my partner; I got back into a strict gym routine, repurposed my diet into something healthy and enjoyable, and focused on who I wanted to be - I finally started regular therapy sessions too.</p>\n<p>I would say the toughest conceptual struggle of my life thus far was <em>consistency</em>, despite all my reading of books related to developing habits and the compounding benefits of sticking to them I just couldn't manage it. In some way I may have needed this recent hardship for the motivation it provided in becoming who I wanted to be. Now as of this week I have been going to the gym a minimum of 4 times a week and practiced piano daily for 30 minutes for two months alongside weekly therapy sessions and my new full-time career as a software engineer, while still making time for the valued relationships in my life. I have avoided the pitfalls of heavily partying and rebounds, and while I still have my high and low points, I know that any previous version of myself would be shockingly proud of the person I am turning out to be.</p>","excerpt":"2021 was a pretty mixed bag as far as years go. It was one of those periods where time was hard to keep track of and unreal at times…"}},{"node":{"id":"694e5854-c783-56f4-92a2-0a23c28eaf5f","frontmatter":{"title":"Correctly Installing Python on MacOS Big Sur","date":"February 20, 2021"},"fields":{"slug":"2021-02-20-correctly-installing-python"},"html":"<p>When using Python it is not recommended to use the Mac system default version, nor is it worth messing with this installation.\nInstead, the best option to install Python (and several versions if needed) is through the <code>pyenv</code> package, provided by <strong>homebrew</strong>.</p>\n<h1>Pyenv</h1>\n<p><code>brew install pyenv</code></p>\n<ul>\n<li>When using Pyenv, the installations of python do not have the correct icon, it is blank</li>\n<li>To fix this, right click the python installation file e.g. <code>python3.9</code> and drag a <code>.icns</code> file to the top left where the blank icon is</li>\n</ul>\n<h1>Python and Tkinter</h1>\n<p>Install Tkinter with homebrew, <code>brew install tcl-tk</code>\nIf you already have a Python install using <code>pyenv</code> you must first uninstall it with <code>pyenv uninstall X.X.X</code> to be reinstalled after you configure Tkinter</p>\n<p>Configure Tkinter with the following shell command:</p>\n<deckgo-highlight-code language=\"bash\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">env \\\n  PATH=&quot;$(brew --prefix tcl-tk)/bin:$PATH&quot; \\\n  LDFLAGS=&quot;-L$(brew --prefix tcl-tk)/lib&quot; \\\n  CPPFLAGS=&quot;-I$(brew --prefix tcl-tk)/include&quot; \\\n  PKG_CONFIG_PATH=&quot;$(brew --prefix tcl-tk)/lib/pkgconfig&quot; \\\n  CFLAGS=&quot;-I$(brew --prefix tcl-tk)/include&quot; \\\n  PYTHON_CONFIGURE_OPTS=&quot;--with-tcltk-includes=&#39;-I$(brew --prefix tcl-tk)/include&#39; --with-tcltk-libs=&#39;-L$(brew --prefix tcl-tk)/lib -ltcl8.6 -ltk8.6&#39;&quot; \\\n  pyenv install 3.9.1</code>\n        </deckgo-highlight-code>\n<p>This adds it to the path and addresses the caveats output by homebrew</p>\n<p>Then set this as your system's global python version, <code>pyenv global 3.9.1</code> and reload your terminal/source your <code>.zshrc</code></p>\n<p>If not using Tkinter on a mac, you can likely just do <code>pyenv install 3.X.X</code>, however I am using it and so need to configure that too.</p>\n<h1>Pip</h1>\n<p>When the global pyenv python version is set, the pip command will default to that installation of python\nIt is a good idea to update pip before installing anything, with <code>pip install --upgrade pip</code></p>\n<h2>Incorrect packages</h2>\n<p>Before using pyenv to manage python, I mistakenly used the <code>pip3</code> command to install packages\nThese are all located in <code>~/Library/Python/3.8/lib/python/site-packages/</code>\nSimilarly there may be packages installed in the Python 2.X folder if they were installed using Python 2's pip\nThey could also be in <code>/usr/local/lib/</code></p>\n<h2>Managing Virtual Installations</h2>\n<p>The recommended way to do this for local development is using <code>pipenv</code></p>\n<h3>pipenv</h3>\n<ul>\n<li>Install pipenv after pyenv is set up with <code>pip install pipenv</code></li>\n<li>Navigate to a new folder/your project folder, e.g. <code>mkdir todo_list &#x26;&#x26; cd todo_list</code></li>\n<li>Run <code>pipenv install</code> to create a new virtual environment</li>\n<li>Run <code>pipenv shell</code> to enter the shell for this new virtual environment, <code>exit</code> to exit this shell</li>\n<li><code>pipenv install name</code> where name is a dependency is how to install packages</li>\n</ul>","excerpt":"When using Python it is not recommended to use the Mac system default version, nor is it worth messing with this installation.\nInstead, the…"}},{"node":{"id":"0ae751d0-2f65-5a9d-b928-626b7029b9aa","frontmatter":{"title":"Understanding Recursion","date":"February 09, 2021"},"fields":{"slug":"2021-02-09-recursion"},"html":"<h1>What is Recursion?</h1>\n<p>Recursion is a computing term that is surprisingly difficult to find a definition for. Putting it as simply as I can, a <em>recursive function</em> is one that calls itself until it achieves its desired output.</p>\n<p>It is also surprisingly difficult to wrap your head around, I know it was for me. Visualizing the <em>call stack</em> of recursive functions is difficult to do in your head.</p>\n<h1>Recursive Array Sum</h1>\n<p>Below is a recursive <code>python</code>  function to sum a given array:</p>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">def recursiveSum(arr):\n    if (len(arr)) == 1:\n        return arr[0]\n    else:\n        return arr[0]+recursiveSum(arr[1:])\n        # myArr[1:] = 2,3,4 (index 1 onwards)\n\nmyArr = [1,2,3,4]\nprint(recursiveSum(myArr)) # 10\nprint(myArr[0:]) # prints whole array</code>\n        </deckgo-highlight-code>\n<p>Let's walk through this function's execution:</p>\n<ol>\n<li>Return 1 + sum([2,3,4])</li>\n<li>Return 1 + 2 + sum([3,4])</li>\n<li>Return 1 + 2 + 3 + sum([4])</li>\n<li>Return 1 + 2 + 3 + 4</li>\n</ol>\n<p>On this last line, the 4 is added through the exit condition of <code>len(arr) == 1</code></p>\n<p>By doing an addition operation in the function return, the return value of each recursive call of the function is <em>added</em> to the final function return</p>\n<h1>Factorial</h1>\n<p>Now let's look at an example of a recursive function to calculate a number's factorial:</p>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">def getFact(n):\n    if n == 1:\n        return n \n    return n * getFact(n-1)\n    # if n=5, return 5 * 4 * 3 * 2 * 1\n\nnum = 5\nprint(getFact(num)) # 120</code>\n        </deckgo-highlight-code>\n<p>Here is an animation that steps through a recursive factorial function:</p>\n<p><img src=\"https://i2.wp.com/blog.codeanalogies.com/wp-content/uploads/2020/01/recursionGIFsfactorialnum2.gif?resize=720%2C540&#x26;ssl=1\" alt=\"\"></p>\n<h1>Strings</h1>\n<p>Finally, let's end with a recursive string reverse function:</p>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">def reverse(string):\n    print(string)\n    if string == &quot;&quot;:\n        return string\n    else:\n        return reverse(string[1:]) + string[0]\n        # call reverse on string starting from 2nd element, plus first element\n\ns = &quot;hello&quot;\nreverse(s) # &#39;olleh&#39;</code>\n        </deckgo-highlight-code>\n<br>\n<table>\n<thead>\n<tr>\n<th>Call</th>\n<th>string</th>\n<th>s[0]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>reverse('hello')</td>\n<td>s = hello</td>\n<td>s[0] = h</td>\n</tr>\n<tr>\n<td>=reverse('ello') + 'h'</td>\n<td>s[1:] = ello</td>\n<td>s[0] = e</td>\n</tr>\n<tr>\n<td>=reverse('llo') + 'e' + 'h'</td>\n<td>s[1:] = llo</td>\n<td>s[0] = l</td>\n</tr>\n<tr>\n<td>=reverse('lo') + 'l' + 'e' + 'h'</td>\n<td>s[1:] = lo</td>\n<td>s[0] = l</td>\n</tr>\n<tr>\n<td>=reverse('o') + 'l' + 'l' + 'e' + 'h'</td>\n<td>s[1:] = o</td>\n<td>s[0] = o</td>\n</tr>\n<tr>\n<td>=reverse(\"\") + 'o' + 'l' + 'l' + 'e' + 'h'</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Return 'olleh'</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Note that recursion isn't always the best solution, the string reverse function could be written simply as: <code>print(s[::-1])</code></p>","excerpt":"What is Recursion? Recursion is a computing term that is surprisingly difficult to find a definition for. Putting it as simply as I can, a…"}},{"node":{"id":"383604cb-7d13-5092-b74d-8f9f4a1a7328","frontmatter":{"title":"Data Structures Part IV - Trees","date":"February 07, 2021"},"fields":{"slug":"2021-02-07-data-structures-trees"},"html":"<h1>What is a Tree?</h1>\n<ul>\n<li>A tree is another <em>abstract data type</em></li>\n<li>Similar to a <em>linked list</em> it is a collection of nodes, however a tree is a <em>non-linear</em> abstract data type\n<ul>\n<li>This means the data is not stored sequentially</li>\n</ul>\n</li>\n<li>In general, a tree has a <em>root node</em>, which then has <em>child nodes</em></li>\n<li>The nodes are connected by <em>edges</em></li>\n<li>The value (or data) of a node is known as a <em>key</em></li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/975/1*PWJiwTxRdQy8A_Y0hAv5Eg.png\" alt=\"\"></p>\n<h1>Tree Class Definition in Python</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">class Tree:\n    def __init__(self, data=None):\n        self.left = None\n        self.right = None\n        self.data = data</code>\n        </deckgo-highlight-code>\n<ul>\n<li>The above tree class is a <em>binary tree</em>, where each node has only a left pointer or right pointer\n<ul>\n<li>A binary tree is one where each node has <strong>two</strong> child nodes at most</li>\n</ul>\n</li>\n</ul>\n<h1>Tree Implementation</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\"># Recursive count node function\ndef count_all(node):\n    return 1 + count_all(node.left) + count_all(node.right) if node else 0\n\n# Implementing node class to form a tree\nroot = Tree()\n\nroot.data = 4\nroot.data = &quot;root&quot;\n\nroot.left = Tree()\nroot.left.data = &quot;left&quot;\n\nroot.right = Tree()\nroot.right.data = &quot;right&quot;\n\nprint(count_all(root))</code>\n        </deckgo-highlight-code>\n<h1>Why use a Tree?</h1>","excerpt":"What is a Tree? A tree is another abstract data type Similar to a linked list it is a collection of nodes, however a tree is a non-linear…"}},{"node":{"id":"d066bd16-3de1-5ff7-8e79-e622c0ce7992","frontmatter":{"title":"Privacy-centric Browsing","date":"February 06, 2021"},"fields":{"slug":"2021-02-06-privacy-centric-browsing"},"html":"<p>Big tech and it's ever-increasing rate of data collection is a popular talking point for both news organizations and governments in recent times. Lawsuits involving the likes of Facebook and Google are almost commonplace now the methods of user data mining become all the more intrusive. This post will outline some ways to improve your privacy and reduce what data is being collected through your day-to-day browsing.</p>\n<h1>Chrome Phone Home</h1>\n<p>I'm unsure of how many non-techy internet users are aware of the scope that Google Chrome's telemetry covers, as a starting point just know this: every single search or page you visit in Chrome is logged by Google via IP logging and through your Google account if you have one.</p>\n<p>'So what?' You may ask. Well this is fine and dandy if you enjoy services building a marketing profile around your browsing habits and knowing everything you do online. But for many, including myself, I have no desire for this. I do not care for targeted advertisements nor do I want a log of my online activities.</p>\n<p>This is not to say I look up bomb-making tutorials and host a dark-web drug dealing marketplace in my spare time, but I want a level of anonymity in my personal life. If one day I am searching for a product that has caught my attention, it does not mean I will <em>always</em> want to find similar products and I certainly do not appreciate efforts to convince me otherwise.</p>\n<h1>Does this mean I use none of the above? NO.</h1>\n<p>It is extremely difficult to avoid big-tech services as the majority of users do not know the extent of the privacy violations they commit. It is unlikely that your parents care at all if Facebook is tracking them and it is even more unlikely that they will delete their accounts for an alternative (especially when current alternatives are prone to extremists)</p>\n<p>I would like to say I use Signal for my online messaging needs but this is just not practical for me. A whopping 5 people (if that) in my social circles would be willing to use it, with the rest preferring to use Facebook and WhatsApp and have no personal reasons not to. I am, therefore, complicit in this data collection.</p>\n<h1>So what is the solution?</h1>\n<p>This post is simply to advise on some ways to cut down on the companies trying to follow you around the internet, think of it as a progression from eating meat to becoming pescatarian or vegetarian. I am not willing to become a vegan in this sense (and funnily enough in the actual sense) excluding myself from social circles in the name of principle. My life would be inconvenient and I am self-centered.</p>\n<p>Instead I use <code>ungoogled-chromium</code> as my browser (essentially Chrome without all the data collection). As I am using an M1 Mac, the latest version of this was found <a href=\"https://github.com/macchrome/macstable/releases/tag/v87.0.4280.88-r812852-Ungoogled-macOS\">here</a>. It unfortunately does not offer account syncing as this was restricted by Google last year. I also use a VPN connection whenever possible - my provider is Mullvad, based in Sweden. This just sends all my traffic through a server far away from me, so all my ISP sees is a request to the VPN server, not to any of the sites I visit. As well as this I use DuckDuckGo as my search engine, which is, in my opinion, just as good as Google without the evilness.</p>\n<p>There you have it. I have managed to turn a few sentences into a full blog post about privacy with one or two useful points. Expect more performative writing like this.</p>","excerpt":"Big tech and it's ever-increasing rate of data collection is a popular talking point for both news organizations and governments in recent…"}},{"node":{"id":"8125ef66-3355-5d72-8794-542bec1640ef","frontmatter":{"title":"Hosting your Own Web Server","date":"February 05, 2021"},"fields":{"slug":"2021-02-5-hosting-your-own-webserver"},"html":"<p>A personal or portfolio site is something I would recommend everyone has. While there are many options for third-party hosting and email servers, this post will detail how I set up a personal website on my own web server, with a mail server.</p>\n<p>Previously I used a combination of Github Pages, CloudFlare, and MXRoute to achieve a HTTPS secured personal blog and secure email server, but I thought it would be both interesting and educational to to set up my very own corner of the internet independent of these services.</p>","excerpt":"A personal or portfolio site is something I would recommend everyone has. While there are many options for third-party hosting and email…"}},{"node":{"id":"b4e566aa-db09-5326-856e-7bf9217463d9","frontmatter":{"title":"LaTeX and Word","date":"January 28, 2021"},"fields":{"slug":"2021-01-28-latex-and-word"},"html":"<h1>Writing LaTex</h1>\n<ul>\n<li>Essay templates</li>\n<li>alias for new essay</li>\n<li>Use vim and goyo</li>\n<li>Vim works well with vimtex, disabled default wordcount as it is inaccurate</li>\n<li>Correct word count works on file save, but I want to see it in the airline status bar</li>\n<li>Works using vimtex's implementation of texcount, but causes stuttering as it is ran constantly\n<ul>\n<li>Need to find a way to run this on file open and save, not constantly</li>\n</ul>\n</li>\n</ul>\n<h1>Converting to Word</h1>\n<ul>\n<li>pandoc with citeproc and csl files</li>\n<li>zsh function</li>\n</ul>","excerpt":"Writing LaTex Essay templates alias for new essay Use vim and goyo Vim works well with vimtex, disabled default wordcount as it is…"}},{"node":{"id":"51114a33-13c0-5173-8538-87074707f1a3","frontmatter":{"title":"Data Structures Part III - Linked Lists","date":"January 24, 2021"},"fields":{"slug":"2021-01-24-data-structures-linked-list"},"html":"<h1>What is a Linked List?</h1>\n<ul>\n<li>A linked list is a <em>linear data structure</em>, meaning elements are accessed sequentially</li>\n<li>Elements of a linked list are not stored in memory together (non-contiguous), the linking of elements is achieved through <strong>pointers</strong>\n<ul>\n<li>Because elements are accessed sequentially the speed of search operations are dependent on the size of the list</li>\n</ul>\n</li>\n<li>Each element is a separate object (objects of class <code>node</code> in the below implementation).</li>\n<li><code>node</code> objects are composed of: the value of the node, and the pointer to the next node (if any)</li>\n<li>The first node is known as the <code>head</code></li>\n<li>The last node is the <code>tail</code> and points to <code>null</code> or None</li>\n</ul>\n<h1>LinkedList Class Definition in Python</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">class LinkedList:\n    def __init__(self, head=None):\n        self.head = head\n    \n    # repr method defines the &#39;representation&#39; of objects \n    # Essentially defines how they will be displayed textually\n    def __repr__(self): \n        node = self.head\n        nodes = []\n        while node is not None:\n            nodes.append(node.value)\n            node = node.next\n        nodes.append(&quot;None&quot;)\n        return &quot; -&gt; &quot;.join(map(str, nodes))\n\nclass Node:\n    def __init__(self, value, next=None):\n        self.value = value\n        self.next = next\n\n    # Override the output representation of an object from a class\n    def __repr__(self):\n        return self.value</code>\n        </deckgo-highlight-code>\n<h1>LinkedList Implementation</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\"># List\nllist = LinkedList()\n\n# Nodes\nfirst = Node(1)\nsecond = Node(2)\nthird = Node(3)\n\nfirst.next = second\nsecond.next = third\n\n# Linking\nllist.head = first\nllist.head.next = second\nsecond.next = third\n\nprint(repr(llist))</code>\n        </deckgo-highlight-code>\n<p>Output: <code>1 -> 2 -> 3 -> None</code> = <code>head(first) -> second -> tail(third) -> None</code></p>\n<h1>Why use a Linked List?</h1>","excerpt":"What is a Linked List? A linked list is a linear data structure, meaning elements are accessed sequentially Elements of a linked list are…"}},{"node":{"id":"261f8ecb-ccbd-5250-ad09-6a6187040fe7","frontmatter":{"title":"Graduate Software Engineer with Sky: Coding Test","date":"January 23, 2021"},"fields":{"slug":"2021-01-23-sky-coding-test"},"html":"<p>One of my current graduate scheme applications is with Sky, a broadcasting and telecommunications company well-known in the UK.</p>\n<p>Once my online application was submitted the next step was completing a standard psychometric test, the majority of the questions were based around data from Sky and tasked me with interpreting it using percentage arithmetic.</p>\n<p>It also had logic questions related to password guessing, and some algebraic problems.</p>\n<h1>Password Problem 1</h1>\n<p>Given two passwords: keyboard951 and 12345drone, each containing 6 of the correct characters in a password, choose the correct password from the below options:</p>\n<ul>\n<li>worded73</li>\n<li>56brownie</li>\n<li>dreaming91</li>\n<li>brandnew12</li>\n<li>crowned56</li>\n</ul>\n<p>Method: find the password that shares the most characters with <strong>both</strong> of the given passwords</p>\n<details> \n  <summary>Click <b>here</b> for answer</summary>\n   brandnew12\n</details><br>\n<h1>Algebraic Problem 1</h1>\n<p>A+A+A = 27</p>\n<p>B+B-A = 15</p>\n<p>C+C-B = 6</p>\n<details> \n  <summary>Click <b>here</b> for answer</summary>\n   A = 9<br>\n   B = 12<br>\n   C = 9\n</details><br>\n<h1>Algebraic Problem 2</h1>\n<p>X+X+X+X = 48</p>\n<p>X+X+(Y * Y * Y) = 51</p>\n<p>Z+Z+(Z * Y) = 25</p>\n<details> \n  <summary>Click <b>here</b> for answer</summary>\n   X = 12<br>\n   Y = 3<br>\n   Z = 5 (a+a+a+a+a = 25)\n</details><br>\n<p>I passed this stage and was met then with a coding test, hosted on <a href=\"codility.com\">Codility</a> which was comprised of the following questions.</p>\n<h1>Task 1:</h1>\n<p>You are given a string: 'aabc', 'baa', 'abab'. Return true if the character 'a' is always followed by another character 'a'.</p>\n<ul>\n<li>Examples: 'aabc' returns true, and 'abab' returns false.</li>\n</ul>\n<h1>Task 2:</h1>\n<p>There are 'n' coins, each showing either heads or tails. We would like all the coins to form a sequence of alternating heads and tails. What is the minimum number of coins that must be reversed to achieve this.</p>\n<ul>\n<li>Examples: [1,0,1,0,1,1] returns 1 (only last coin must be flipped)</li>\n<li>Note: alternating binary bits, count the differences for swapping 1's or 0's and take the minimum</li>\n</ul>\n<h1>Task 3:</h1>\n<p>You are given a string 'S'. Deletion of the k-th letter of S costs C[k]. After deleting a letter the costs of deleting other letters do not change. You want to delete some letters from S to obtain a string without two identical letters next to each other. What is the minimum total cost of deletions to achieve such a string?</p>\n<ul>\n<li>Examples: for S='ab' and C = [1,3], after deleting 'a', deletion of 'b' will still cost 3\n<ul>\n<li>S = 'abccbd', C=[0,1,2,3,4,5], should return 2. Removing first occurence of 'c' achieves 'abcbd'</li>\n</ul>\n</li>\n</ul>\n<h1>Task 4:</h1>\n<p>Given a string to be parsed in CSV format \"id,name,age,job\\n1,Jill,24,Scientist\\n2,Ryan,23,Developer\\n3,Charlie,NULL,Researcher\" that produces the following table:</p>\n<table>\n<thead>\n<tr>\n<th>Id</th>\n<th>Name</th>\n<th>Age</th>\n<th>Job</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Jill</td>\n<td>24</td>\n<td>Scientist</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Ryan</td>\n<td>23</td>\n<td>Developer</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Charlie</td>\n<td>NULL</td>\n<td>Researcher</td>\n</tr>\n</tbody>\n</table>\n<p>If a row's field has a cell <em>exactly</em> equal to 'NULL', remove that row from the input string</p>\n<ul>\n<li>Examples: \"id,name,age,job\\n1,Jill,24,Scientist\\n2,Ryan,23,Developer\\n3,Charlie,NULL,Researcher\" becomes \"id,name,age,job\\n1,Jill,24,Scientist\\n2,Ryan,23,Developer\"</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Id</th>\n<th>Name</th>\n<th>Age</th>\n<th>Job</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Jill</td>\n<td>24</td>\n<td>Scientist</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Ryan</td>\n<td>23</td>\n<td>Developer</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Note that rows containing 'null' as part of a word such as 'Anulled' or 'ANULLED' must <strong>not</strong> be deleted, or rows with 'null' in lowercase</li>\n</ul>\n<h1>Task 5:</h1>\n<p>Given two arrays of dice rolls, e.g. [1,2,3] and [2,4,6], create a function that takes in these arrays and changes them to equal the <strong>same total amount</strong> (if possible) in the <strong>minimum</strong> amount of changes possible.</p>\n<ul>\n<li>Note: greedy algorithm suitable here</li>\n</ul>\n<h1>Results</h1>\n<p>I was allotted 120 minutes to complete all 5 tasks, and managed to pass all tests for tasks 1-4, but did not manage to complete the final task.</p>\n<p>This was my first ever timed-coding assessment and 4/5 was enough to progress to the next stage of video assessments.</p>\n<p>The experience has given me a lot of confidence for future coding tests, and I have been enjoying my time practicing on Leetcode and similar sites.</p>","excerpt":"One of my current graduate scheme applications is with Sky, a broadcasting and telecommunications company well-known in the UK. Once my…"}},{"node":{"id":"dd2c7a7d-19cb-59ef-9522-f94afa805934","frontmatter":{"title":"Psychometric Testing","date":"January 16, 2021"},"fields":{"slug":"2021-01-16-psychometric-tests"},"html":"<p>In the UK, it is common for graduate roles - often termed grad schemes - to involve several stages for applicants.</p>\n<p>The first few stages often involve psychometric/aptitude tests that focus on a candidate's ability to reason from data, for technical positions there is a focus on numerical reasoning.</p>\n<p>Numerical reasoning tests generally provide a candidate with data in the form of figures and graphs, and require them to extrapolate additional information from them.</p>\n<h1>Example - Increase a number by a percentage:</h1>\n<p>Sky had 22584250 total customers last year, this year it is expected to have an increase of 8%. What will the total customers be for this year?</p>\n<p>Method: Increase 22584250 by 8%</p>\n<details>\n<summary>Answer</summary>\n  Steps:<br>\n  1. Calculate 1% of original: 22584250 / 100 = 225842.5<br>\n  2. Calculate an 8% increase: 225842.5 * 8 = 1806740<br>\n  3. Add to original: 1806740 + 22584250 = 24390990\n</details><br>\n<h1>Example 2 - A number as a percentage of a larger number:</h1>\n<p>By what percentage has the total Sky customers increased from 2018-2019?</p>\n<p>Sky customers 2018: 21068400\nSky customers 2019: 22584250</p>\n<p>Method: Calculate the difference between the two numbers as a percentage of the original</p>\n<details> \n  <summary>Answer</summary>\n   Steps:<br>\n   1. Find out difference of new number and original: 22584250 - 21068400 = 1515850 <br>\n   2. Find out what the difference is as a percentage of the original number (1515850 / 21068400) * 100 = 7.1948985210077657 <br>\n   3. Round (if required) = 7%\n</details>","excerpt":"In the UK, it is common for graduate roles - often termed grad schemes - to involve several stages for applicants. The first few stages…"}},{"node":{"id":"46ee6f58-6dc1-5a0b-81f7-a1b37e1b4fac","frontmatter":{"title":"Setting up VSCode on an M1 Mac","date":"January 07, 2021"},"fields":{"slug":"2021-01-07-vscode-mac"},"html":"<h1>Config</h1>\n<ul>\n<li>Install language plugins</li>\n<li>Install <code>vim</code> keybinds</li>\n<li>Change terminal app to <code>iTerm</code></li>\n<li>Change terminal font to a patched font e.g. <code>Nerd Hack Font Mono</code> for terminal icons to match terminal config</li>\n</ul>\n<h2>Settings</h2>\n<h1>Accessing Settings</h1>\n<ul>\n<li>Code in status bar > Preferences > Settings\n<ul>\n<li>To access <code>settings.json</code> scroll through settings until you see a setting with <em>edit in settings.json</em> under it (there is probably a better way)</li>\n</ul>\n</li>\n<li>For keybindings: Code > Preferences > Keyboard shortcuts\n<ul>\n<li>To access <code>keybindings.json</code> > Click the paper icon with an arrow on it in the top right</li>\n</ul>\n</li>\n</ul>\n<h1>Settings for VSCode outside of it</h1>\n<ul>\n<li>Created an alias <code>openc</code> which is set to alias <code>\"open -a Visual\\ Studio\\ Code\\ -\\ Insiders\"</code> as using <code>code</code> to open files while in a VSCode window makes the icon bounce before opening, this is faster\n<ul>\n<li><code>open</code> uses Xcode by default, it was quicker to make this alias than change file associations for every type</li>\n</ul>\n</li>\n<li>Disable Apple's press and hold: <code>defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool true</code></li>\n</ul>\n<h1>My Configs</h1>\n<p>settings.json</p>\n<deckgo-highlight-code language=\"json\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">{\n    &quot;vim.leader&quot;: &quot;,&quot;,\n    &quot;vim.insertModeKeyBindings&quot;: [\n        {\n            &quot;before&quot;: [\n                &quot;k&quot;,\n                &quot;j&quot;\n            ],\n            &quot;after&quot;: [\n                &quot;&lt;Esc&gt;&quot;\n            ]\n        }\n    ],\n    &quot;workbench.colorTheme&quot;: &quot;Solarized Light&quot;,\n    &quot;terminal.external.osxExec&quot;: &quot;iTerm.app&quot;,\n    &quot;editor.fontFamily&quot;: &quot;Hack Nerd Font Mono&quot;,\n    &quot;editor.wordWrap&quot;: &quot;on&quot;,\n    &quot;editor.inlineHints.fontFamily&quot;: &quot;Hack Nerd Font Mono&quot;,\n    &quot;editor.cursorSmoothCaretAnimation&quot;: true,\n    &quot;editor.formatOnPaste&quot;: true,\n    &quot;editor.formatOnSave&quot;: true,\n    &quot;window.autoDetectColorScheme&quot;: true,\n    &quot;workbench.preferredLightColorTheme&quot;: &quot;Solarized Light&quot;,\n    &quot;workbench.preferredDarkColorTheme&quot;: &quot;Solarized Dark&quot;,\n    &quot;workbench.editorAssociations&quot;: [\n        {\n            &quot;viewType&quot;: &quot;jupyter-notebook&quot;,\n            &quot;filenamePattern&quot;: &quot;*.ipynb&quot;\n        }\n    ],\n    &quot;python.languageServer&quot;: &quot;Pylance&quot;,\n    &quot;python.defaultInterpreterPath&quot;: &quot;~/.pyenv/versions/3.9.1/bin/python&quot;,\n    &quot;python.formatting.provider&quot;: &quot;black&quot;,\n    &quot;python.formatting.blackPath&quot;: &quot;/Users/rnash/.pyenv/shims/black&quot;\n}</code>\n        </deckgo-highlight-code>\n<p>keybindings.json</p>\n<deckgo-highlight-code language=\"json\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">// Place your key bindings in this file to override the defaults\n[\n    {\n        &quot;key&quot;: &quot;alt+j&quot;,\n        &quot;command&quot;: &quot;workbench.action.terminal.focus&quot;,\n        &quot;when&quot;: &quot;!terminalFocus&quot;\n    },\n    {\n        &quot;key&quot;: &quot;alt+k&quot;,\n        &quot;command&quot;: &quot;workbench.action.focusActiveEditorGroup&quot;,\n        &quot;when&quot;: &quot;terminalFocus&quot;\n    },\n    {\n        &quot;key&quot;: &quot;enter&quot;,\n        &quot;command&quot;: &quot;acceptSelectedSuggestion&quot;,\n        &quot;when&quot;: &quot;suggestWidgetVisible &amp;&amp; textInputFocus&quot;\n    },\n    {\n        &quot;key&quot;: &quot;tab&quot;,\n        &quot;command&quot;: &quot;selectNextSuggestion&quot;,\n        &quot;when&quot;: &quot;suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus&quot;\n    },\n    {\n        &quot;key&quot;: &quot;shift+tab&quot;,\n        &quot;command&quot;: &quot;selectPrevSuggestion&quot;,\n        &quot;when&quot;: &quot;suggestWidgetMultipleSuggestions &amp;&amp; suggestWidgetVisible &amp;&amp; textInputFocus&quot;\n    }\n]</code>\n        </deckgo-highlight-code>\n<h1>Issues</h1>\n<ul>\n<li>When using my light theme for the terminal, nvim does not respect the light background and opens in dark mode. This only happens in the VSCode integrated terminal\n<ul>\n<li>It would be stupid to use vim within the VSCode terminally anyway, but is annoying nonetheless</li>\n</ul>\n</li>\n<li>This seems to be an issue with VSCode's solarized light theme, as when running nvim in an iTerm terminal within VSCode, my iTerm color scheme is not followed exactly (e.g. the terminal text is black and not grey)</li>\n<li>A possible workaround is changing my iTerm color switch script to change profiles instead of color presets, but nvim could still be unable to realise the background is light when in light mode\n<ul>\n<li>Update: this does not work either, the profile does not change until a new session is created (even when done through the app)</li>\n</ul>\n</li>\n</ul>","excerpt":"Config Install language plugins Install vim keybinds Change terminal app to iTerm Change terminal font to a patched font e.g. Nerd Hack Font…"}},{"node":{"id":"0e660b4d-00ab-53ac-a489-7cee22b4fe5b","frontmatter":{"title":"Data Structures Part II - Queues","date":"January 04, 2021"},"fields":{"slug":"2021-01-04-data-structures-queues"},"html":"<h1>What is a Queue?</h1>\n<p>A queue is another <em>abstract data type</em> built upon the <em>array</em> data structure.</p>\n<p>A queue stores items in a First-In -> First-Out manner, commonly referred to as FIFO.</p>\n<p>The 'head' is the first element (oldest), the 'tail' is the last element (most recent).</p>\n<h1>Example of a Queue</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">friend_names = [&#39;Ryan&#39;, &#39;Charlie&#39;, &#39;Sean&#39;, &#39;Kyle&#39;]\n\n[0] = &#39;Ryan&#39; #(head) \n\n[4] = &#39;Kyle&#39; #(tail)</code>\n        </deckgo-highlight-code>\n<h1>Methods of a Queue</h1>\n<ul>\n<li><code>enqueue(item)</code> - add an element to the tail of the queue</li>\n<li><code>dequeue()</code> - remove (return) the head element of the queue</li>\n</ul>\n<h1>Queue Class Definition in Python</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">class Queue:\n    def __init__(self):\n        self.items = []\n\n    def enqueue(self, item):\n        self.items.append(item)\n\n    def dequeue(self):\n        self.items.pop(0)\n\n    def peek(self):\n        return self.items[0]  # view first item (front of queue)\n</code>\n        </deckgo-highlight-code>\n<h1>Queue Implementation</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">q = Queue()  # create a new Stack\n\nq.enqueue(&#39;a&#39;)\nq.enqueue(&#39;b&#39;)\nq.enqueue(&#39;c&#39;)\nq.enqueue(&#39;d&#39;)\n\nprint(&quot;Top is:&quot;, q.peek(), &quot;\\n&quot;)  # &#39;a&#39; \nq.dequeue() \n\nprint(&quot;Top is:&quot;, q.peek(), &quot;\\n&quot;)  # &#39;b&#39;\nq.dequeue() \n\nq.enqueue(&#39;e&#39;)\n\n# q = [&#39;c&#39;,&#39;d&#39;,&#39;e&#39;]</code>\n        </deckgo-highlight-code>\n<h1>Why use a Queue?</h1>","excerpt":"What is a Queue? A queue is another abstract data type built upon the array data structure. A queue stores items in a First-In -> First-Out…"}},{"node":{"id":"7bd984d4-ab96-53cc-bd4a-cfb5c5367da9","frontmatter":{"title":"Using an Anne Pro 2 on MacOS","date":"December 28, 2020"},"fields":{"slug":"2020-12-28-mac-anne-pro-2-setup"},"html":"<p>This year for Christmas, I was lucky enough to receive an Anne Pro 2 mechanical keyboard. This post will cover how I have set it up to work with MacOS.</p>","excerpt":"This year for Christmas, I was lucky enough to receive an Anne Pro 2 mechanical keyboard. This post will cover how I have set it up to work…"}},{"node":{"id":"a1a51872-b2bd-5481-b381-7d7d037a78e3","frontmatter":{"title":"Data Structures Part I - Stacks","date":"December 24, 2020"},"fields":{"slug":"2020-12-24-data-structures-stacks"},"html":"<p>For a bit of background, I have now completed my degree in computer science (with management) and am in the process of applying for graduate software engineering positions in London.</p>\n<p>To prepare for interviews I have been studying data structures and algorithms so that I don't completely bomb the technical side of them, I would say this was a part of my degree I didn't spend enough time on during my first year.</p>\n<p>These entries serve as not only useful information to my fellow 2020 graduates and those in their final year also applying for positions, but to consolidate my knowledge of the concepts I will be covering.</p>\n<p>To start of this data structure and algorithms series, I will begin with a data structure known as a 'Stack'.</p>\n<h1>What is a Stack?</h1>\n<p>First we must define a <em>data structure</em> - a collection of data values, the relationships among them, and the functions/operations that can be performed on them.</p>\n<p>An <em>abstract data type</em> uses a data structure as its base, and is the defined behaviour of a given data structure, of which a 'Stack' is an example.</p>\n<p>Creating a 'Stack' is defining the behaviour of a <em>non-primitive</em> data type - generally an <em>array</em> - to conform to the model of a stack.</p>\n<p>A stack's general behaviour stores items in a Last-In -> First-Out manner, commonly referred to as LIFO.\nIt has the operations <code>push</code> and <code>pop</code> which add to the top of a stack and remove a stack's top item, respectively.</p>\n<h1>Stack Class Definition in Python</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">class Stack:\n    def __init__(self):\n        self.items = (\n            []\n        )  # every stack object will have an attribute &#39;items&#39; which is an empty list\n\n    # Methods\n    def isEmpty(self):\n        return self.items == []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[len(self.items) - 1]\n\n    def size(self):\n        return len(self.items)</code>\n        </deckgo-highlight-code>\n<h1>Stack Implementation</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">s = Stack()  # create a new Stack\n\ns.push(4)  # push to it\n\ns.push(5)\n\ns.push(6)\n\n&#39;&#39;&#39;Current stack:\n6\n5\n4\n&#39;&#39;&#39;\n\ns.pop()\n\n&#39;&#39;&#39;Current stack:\n5\n4 \n&#39;&#39;&#39;\n\nprint(&quot;Top is:&quot;, s.peek(), &quot;\\n&quot;)  # View top item\n</code>\n        </deckgo-highlight-code>\n<h1>Why use a Stack?</h1>","excerpt":"For a bit of background, I have now completed my degree in computer science (with management) and am in the process of applying for graduate…"}},{"node":{"id":"02422e93-1fb6-5146-8823-3768b453ad3c","frontmatter":{"title":"Neovim Configuration","date":"December 21, 2020"},"fields":{"slug":"2020-12-21-neovim-configuration"},"html":"<h1>Pre-installation:</h1>\n<ul>\n<li>My choice of terminal on my M1 Macbook Air is <code>iTerm2</code></li>\n<li>In iTerm2 go to Preferences > General > Selection and activate <code>Allow terminal applications to access clipboard</code></li>\n<li>In iTerm2 go to Preferences > Profile > Keys and toggle set the left option key to to <code>Esc+</code>\n<ul>\n<li>This is used for my window navigation keybindings that use the Mac option key</li>\n</ul>\n</li>\n</ul>\n<h1>Pre-Installation</h1>\n<ul>\n<li><code>node.js</code> is required for <code>CoC</code></li>\n<li><code>pip install pynvim --upgrade</code></li>\n</ul>\n<h1>Installation</h1>\n<ul>\n<li>Install <strong>neovim</strong>\n<ul>\n<li><code>brew install neovim</code></li>\n</ul>\n</li>\n<li>It is worth installing <strong>node's</strong> <code>neovim</code> package with <code>npm install -g neovim</code> if you will be working with it</li>\n<li>Install a <strong>vim</strong> plugin manager, I use <code>vim-plug</code> which can be installed with:\n<deckgo-highlight-code language=\"bash\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">sh -c &#39;curl -fLo &quot;${XDG_DATA_HOME:-$HOME/.local/share}&quot;/nvim/site/autoload/plug.vim --create-dirs \\\n  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#39;</code>\n        </deckgo-highlight-code>\n</li>\n<li>Open up the <strong>neovim</strong> config file at <code>~/.config/nvim/init.vim</code>\n<ul>\n<li>Set up the plugin section by adding</li>\n</ul>\n<deckgo-highlight-code  theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">call plug#begin(&quot;~/.vim/plugged&quot;)\n&quot; Plugin Section\ncall plug#end()</code>\n        </deckgo-highlight-code>\n<ul>\n<li>Configuring the <code>init.vim</code> file is outside of the scope of this post, my configuration will be dissected in another</li>\n<li>When new plugins have been installed run the command <code>nvim +PlugInstall</code> from the terminal shell</li>\n</ul>\n</li>\n</ul>\n<h2>Plugins</h2>\n<h1>Airline</h1>\n<ul>\n<li>To get a great looking status bar showing important information inside nvim, you can install the <code>vim-airline</code> plugin</li>\n<li>Add <code>Plug 'vim-airline/vim-airline-themes'</code> to your nvim config\n<ul>\n<li>This is highly configurable and often configured to your preference</li>\n</ul>\n</li>\n</ul>\n<h1>VimTex</h1>\n<ul>\n<li><strong>Vim-Airline's</strong> <code>vimtex</code> plugin word count is not accurate\n<ul>\n<li>A better word count is provided by <code>vimtex</code> itself, I run the <code>VimtexCountWords</code> command on every file save of a <code>.tex</code> file via my config file</li>\n</ul>\n</li>\n</ul>\n<h1>CoC</h1>\n<ul>\n<li>For autocompletion I use a plugin called <code>coc.nvim</code> which stands for <strong>Conquerer of Completion</strong></li>\n<li>CoC requires <strong>node.js</strong> to be installed, this can be done with:</li>\n</ul>\n<p><code>curl -sL install-node.now.sh/release | bash</code></p>\n<ul>\n<li>Install CoC by adding <code>Plug 'neoclide/coc.nvim', {'branch': 'release'}</code> to the plugin section of your nvim config</li>\n</ul>\n<h1>CoC Completion</h1>\n<ul>\n<li>In order to use CoC completion, you also need a Language Server for each filetype you want completion for</li>\n<li>To install a language server, run <code>:CocInstall</code> and the name of the server you want</li>\n<li>For example: I autocomplete Python files using <code>coc-python</code>, which I installed by running:</li>\n</ul>\n<p><code>:CocInstall coc-python</code> <em>inside</em> <strong>neovim</strong></p>\n<ul>\n<li><code>coc-pyright</code> is more up to date (<code>coc-python</code>) is archived, but it does not have method definitions (function documentation)</li>\n<li>I use my own forked version of <code>coc-python</code> that removes the annoying Python interpreter name in the status bar</li>\n</ul>\n<h1>CoC Linting</h1>\n<ul>\n<li>CoC also allows for <em>linting</em>, the checking of programmatic and stylistic errors in your code\n<ul>\n<li>Uses <code>pylint</code> by default, I installed <code>flake8</code> through <code>pip</code> instead</li>\n</ul>\n</li>\n<li>I needed to show <strong>nvim</strong> where my Python3 binary was installed (I use <code>Pyenv</code>) for linting to work, by adding the line <code>let g:python3_host_prog = '/Users/rnash/.pyenv/shims/python'</code> to my config file</li>\n<li>Import errors appear when editing a file that I am not in the directory of! <code>cd</code> to the folder containing them and no errors are shown\n<ul>\n<li>I.e. if I define a stack class in <code>stack.py</code> and implement a stack with some operations in <code>stack_impl.py</code> in the same folder, an <code>missingImportError</code> is reported unless I am in the directory containing these files</li>\n</ul>\n</li>\n</ul>\n<h1>CoC Formatting</h1>\n<ul>\n<li>When editing Python code I find it is easier to maintain through the use of a <em>formatter</em>, this is a tool that automatically indents and spaces out code according to a style of your choosing</li>\n<li>My choice of formatter for Python is called <code>black</code> and can be installed by running <code>pip install black</code>\n<ul>\n<li>Note that it may be better practice to install this on a per user basis by omitting <code>sudo</code> and adding the <code>--user</code> flag</li>\n<li>There are some stylistic choices for code structure I prefer over what <code>black</code> uses, it is worth finding a formatter you like</li>\n</ul>\n</li>\n</ul>\n<h1>coc-settings.json</h1>\n<ul>\n<li>For all of these <strong>CoC</strong> options to work, I needed to add the following lines to my CoC configuration file, located at <code>/.config/nvim/coc-settings.json</code></li>\n</ul>\n<deckgo-highlight-code language=\"json\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">{\n  &quot;python.jediEnabled&quot;: false,\n  &quot;python.hideInterpreterName&quot;: true,\n  &quot;python.analysis.diagnosticEnabled&quot;: true,\n  &quot;python.linting.enabled&quot;: true,\n  &quot;python.linting.pylintEnabled&quot;: false,\n  &quot;python.linting.flake8Enabled&quot;: true,\n  &quot;python.formatting.provider&quot;: &quot;black&quot;,\n  &quot;python.formatting.blackPath&quot;: &quot;/Users/rnash/.pyenv/shims/black&quot;,\n  &quot;python.formatting.blackArgs&quot;: [&quot;--line-length&quot;, &quot;90&quot;],\n  &quot;coc.preferences.formatOnType&quot;: true,\n  &quot;coc.preferences.formatOnSaveFiletypes&quot;: [&quot;python&quot;]\n}</code>\n        </deckgo-highlight-code>\n<h1>Syntax Highlighting</h1>\n<ul>\n<li>For some reason <code>coc-python</code> does not work with <code>coc-highlight</code>, instead I use the plugin <code>semshi</code> for Python syntax highlighting</li>\n<li>Installed via: <code>Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}</code></li>\n<li>Semshi color scheme is not great with Solarized</li>\n</ul>\n<h1>Notes</h1>\n<ul>\n<li>Running python files from within Neovim's terminal (using <code>:w !Python %</code> etc) does not work for parsing input - EOF error\n<ul>\n<li>Instead use the <code>te</code> command, e.g. <code>:te python my_file.py</code></li>\n</ul>\n</li>\n<li>I am happy with my current <code>nvim</code> setup but it has required a lot of troubleshooting and it requires a deprecated plugin for <code>CoC</code>, I have been able to achieve the same functionality in VSCode without the headaches which I will document in another post.</li>\n</ul>","excerpt":"Pre-installation: My choice of terminal on my M1 Macbook Air is iTerm2 In iTerm2 go to Preferences > General > Selection and activate Allow…"}},{"node":{"id":"2a0ec690-6c26-5f9c-ac3e-1469b95df434","frontmatter":{"title":"MacOS Big Sur Shell Configuration","date":"December 20, 2020"},"fields":{"slug":"2020-12-20-mac-shell-configuration"},"html":"<p>As mentioned in a previous post, I have migrated to an M1 based MacBook Air and have recently spent some time setting up the terminal shell to my tastes.</p>\n<p>This post will detail what I have done to achieve this.</p>\n<h2>Terminal App</h2>\n<p>The terminal application I am using is <code>iTerm2</code> and I run it under the Rosetta translation layer to keep compatibility with things like <code>homebrew</code>.</p>\n<h3>Terminal Config</h3>\n<ul>\n<li>Download 'oh-my-zsh'</li>\n<li>Download iTerm2\n<ul>\n<li>Install a color scheme for iTerm, I use Dracula or Solarized (Light &#x26; Dark), but there are plenty of options</li>\n<li>Set left option key to Esc+</li>\n<li>I use the following <code>Python</code> script for auto-changing iTerm's theme according to my Mac's system theme:</li>\n</ul>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">import asyncio\nimport iterm2\n\nasync def changeTheme(connection,parts):\n    theme_dark = &quot;Solarized Dark&quot;\n    theme_light = &quot;Solarized Light&quot;\n    print(parts)\n    \n    if &quot;dark&quot; in parts:\n        preset = await iterm2.ColorPreset.async_get(connection, theme_dark)\n    else:\n        preset = await iterm2.ColorPreset.async_get(connection, theme_light)\n\n    # Update the list of all profiles and iterate over them.\n    profiles=await iterm2.PartialProfile.async_query(connection)\n    for partial in profiles:\n        # Fetch the full profile and then set the color preset in it.\n        profile = await partial.async_get_full_profile()\n        await profile.async_set_color_preset(preset)\n\nasync def main(connection):\n\n    app = await iterm2.async_get_app(connection)\n    window = app.current_window\n    initial_theme = await app.async_get_theme()\n    await changeTheme(connection,initial_theme)\n\n    async with iterm2.VariableMonitor(connection, iterm2.VariableScopes.APP, &quot;effectiveTheme&quot;, None) as mon:\n        while True:\n            # Block until theme changes\n            theme = await mon.async_get()\n            # Themes have space-delimited attributes, one of which will be light or dark.\n            parts = theme.split(&quot; &quot;)\n    \n            await changeTheme(connection,parts)\n            \n\niterm2.run_forever(main)</code>\n        </deckgo-highlight-code>\n<ul>\n<li>This must be placed in <code>$HOME/Library/ApplicationSupport/iTerm2/Scripts/AutoLaunch</code></li>\n<li>Then go to <code>iTerm2 > Scripts > Autolaunch</code> and install the Python runtime</li>\n</ul>\n</li>\n</ul>\n<h3>Fonts</h3>\n<ul>\n<li>Install patched <code>Nerd Fonts</code> for terminal symbols/icons\n<ul>\n<li><code>brew tap homebrew/cask-fonts</code></li>\n<li><code>brew install --cask font-hack-nerd-font</code></li>\n</ul>\n</li>\n<li>Install powerlevel10k <code>https://gist.github.com/kevin-smets/8568070</code> and run <code>p10k configure</code> then follow the wizard according to your tastes</li>\n</ul>\n<h3>Jekyll (How I made this blog)</h3>\n<ul>\n<li>Install jekyll '<a href=\"https://jekyllrb.com/docs/installation/macos/\">https://jekyllrb.com/docs/installation/macos/</a>'\n<ul>\n<li><code>gem install --user-install bundler jekyll</code></li>\n<li>Navigate to a jekyll project folder and run <code>bundle config set --local path 'vendor/bundle'</code>\n<ul>\n<li>Note this will fail if there are spaces in the path to the folder</li>\n</ul>\n</li>\n<li>Run <code>bundler install</code></li>\n<li>Now <code>bundle exec jekyll serve</code> will work</li>\n</ul>\n</li>\n</ul>\n<h3>Terminal Dotfiles</h3>\n<ul>\n<li>.git-credentials &#x26; .gitconfig</li>\n<li>.zshrc customisations:\n<ul>\n<li>alias for iCloud drive</li>\n<li>function for highlight homebrew package</li>\n</ul>\n</li>\n</ul>\n<h1>Homebrew:</h1>\n<ul>\n<li>Install using a terminal app running through Rosetta</li>\n<li>Always use an x86 terminal to install and use (M1 not yet supported)</li>\n<li>Packages\n<ul>\n<li>Highlight</li>\n</ul>\n</li>\n</ul>","excerpt":"As mentioned in a previous post, I have migrated to an M1 based MacBook Air and have recently spent some time setting up the terminal shell…"}},{"node":{"id":"b42550bd-2de6-567c-b242-76e6a76e2267","frontmatter":{"title":"Coding Interview Questions Part I - Reverse Int","date":"December 20, 2020"},"fields":{"slug":"2020-12-22-coding-interview-questions-reverse-int"},"html":"<p>This is the first in a series of posts dissecting typical coding interview questions. I will begin with a pretty simple one - <em>reversing an integer</em>.</p>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">def reverse_int(n):\n  rev = 0\n  while num &gt; 0: # n &lt; 10 / 10 = 0 \n    rev = rev * 10 # shift current rev to left to append digit\n    rev = rev + (num % 10) # get last digit of num \n    num = num / 10 # chop off last digit of num</code>\n        </deckgo-highlight-code>\n<h1>Tracing a Call</h1>\n<p><code>reverse_int(492)</code></p>\n<ol>\n<li>Loop 1\n<ol>\n<li><code>rev</code> is <code>0</code></li>\n<li><code>rev</code> is <code>rev * 10 = 0</code></li>\n<li><code>rev</code> is <code>rev</code> + (num % 10) = 2</li>\n<li><code>num</code> = 49</li>\n</ol>\n</li>\n<li>Loop 2\n<ol>\n<li><code>rev</code>is <code>rev</code> * 10 = 20</li>\n<li><code>rev</code> is <code>rev</code> + (num % 10) = 29</li>\n<li><code>num</code> = 4</li>\n</ol>\n</li>\n<li>Loop 3\n<ol>\n<li><code>rev</code> = <code>rev * 10</code> = 290</li>\n<li><code>rev</code> = <code>rev</code> + (num % 10) = 294</li>\n<li><code>num</code> = 0</li>\n</ol>\n</li>\n</ol>","excerpt":"This is the first in a series of posts dissecting typical coding interview questions. I will begin with a pretty simple one - reversing an…"}},{"node":{"id":"be2a28c3-4776-5eac-9231-794a7f04fcf8","frontmatter":{"title":"M1 MacBook Air Setup","date":"December 18, 2020"},"fields":{"slug":"2020-12-18-mac-setup"},"html":"<p>I recently purchased one of Apple's new M1 chip MacBook Airs, and I will say I have been nothing short of impressed.</p>\n<p>I moved from a ThinkPad T480 I ran Linux on - which also served me incredibly well - but wow, the screen alone is leaps and bounds ahead.</p>\n<p>This post details my setup steps.</p>\n<h1>Mac Setup</h1>\n<h2>Mac Preferences</h2>\n<ul>\n<li>Change touchpad to tap to click</li>\n<li>Finder view status bar and path bar</li>\n<li>Configure Apple ID and TouchID</li>\n<li>Set up 1Pass</li>\n<li>Login to websites/apps</li>\n<li>Set up email accounts</li>\n<li>Install homebrew\n<ul>\n<li><code>sudo chown -R /usr/local/*</code> to fix permissions</li>\n</ul>\n</li>\n<li>Arrange folders by default by kind\n<ul>\n<li>In Finder select 'Show View Options' then sort by kind or any other options</li>\n<li>Tick use as defaults</li>\n<li>Delete all .DS_Store files, they contain the icon layouts</li>\n<li><code>sudo find / -name .DS_Store -delete; killall Finder</code></li>\n</ul>\n</li>\n<li>Set safari homepage to Start Page</li>\n<li>Set screenshot directory: <code>defaults write com.apple.screencapture location ~/Photos/Screenshots</code></li>\n<li>As I store a lot of my data with iCloud, often I need to delete the <code>.icloud</code> files when I have moved them to local storage\n<ul>\n<li>This also means adding <code>.*.*.icloud</code> to the <code>.gitignore</code> file of any repos I clone from iCloud to local storage</li>\n</ul>\n</li>\n</ul>\n<h2>Apps</h2>\n<ul>\n<li>Unarchiver</li>\n<li>Wipr (ad-blocker)</li>\n<li>Magnet</li>\n<li>1Pass\n<ul>\n<li>Download from website so Betas can be used</li>\n<li>Preferences > Updates > Beta</li>\n</ul>\n</li>\n<li>Spotify</li>\n<li>MS Office &#x26; Teams</li>\n<li>MPV</li>\n<li>Transmission</li>\n<li>Chrome</li>\n<li>iTerm</li>\n<li>VSCode\n<ul>\n<li>vim keybindings</li>\n<li>latex-workshop</li>\n<li>python extension</li>\n</ul>\n</li>\n<li>MacTeX</li>\n<li>Mullvad</li>\n<li>Xcode</li>\n<li>Flutter</li>\n<li>NodeJS</li>\n</ul>\n<h2>VSCode</h2>\n<ul>\n<li>VSCode terminal\n<ul>\n<li>Command + shift + p</li>\n<li>Type shell '>shell'</li>\n<li>Select 'Install code in PATH'</li>\n<li>Disable Apple press and hold for VSCode\n<ul>\n<li>'defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false'</li>\n<li>'defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool false'</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Cloud development\n<ul>\n<li>LaTeX does not like the ~ in iCloud Drive paths</li>\n<li>Create a symbolic link in Documents folder pointing to desired folder in iCloud Drive\n<ul>\n<li>While in correct foler location 'ln -s ~/Library/Mobile\\ Documents/com~apple~CloudDocs/Documents/CVs/LaTeX'</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Files To Backup:</h2>\n<ul>\n<li>~/.zshrc</li>\n<li>~/.config/nvim/init.vim</li>\n</ul>","excerpt":"I recently purchased one of Apple's new M1 chip MacBook Airs, and I will say I have been nothing short of impressed. I moved from a ThinkPad…"}},{"node":{"id":"e5e7cf2c-0810-59f5-b887-a3c8bd242e96","frontmatter":{"title":"Vegetable Ramen Ⓥ","date":"November 29, 2020"},"fields":{"slug":"2020-11-29-vegetable-ramen"},"html":"<p>This is a quick and easy recipe using pre-made ramen packets but adding in vegetables and tofu</p>\n<h2>Ingredients</h2>\n<h3>Vegetables</h3>\n<ul>\n<li>Onion</li>\n<li>Garlic</li>\n<li>Ginger</li>\n<li>Chestnut mushrooms</li>\n</ul>\n<h3>Sauces/Stock</h3>\n<ul>\n<li>Stock included in ramen packet</li>\n</ul>\n<h3>Starch</h3>\n<ul>\n<li>Ramen noodles</li>\n</ul>\n<h3>Seasoning</h3>\n<ul>\n<li>Salt and pepper to taste</li>\n<li>Fresh chilli pepper if spice is desired</li>\n</ul>","excerpt":"This is a quick and easy recipe using pre-made ramen packets but adding in vegetables and tofu Ingredients Vegetables Onion Garlic Ginger…"}},{"node":{"id":"c00f75b3-984b-520b-9e00-3a4a5d85f9cc","frontmatter":{"title":"Spaghetti and Meatballs Ⓥ","date":"July 22, 2020"},"fields":{"slug":"2020-07-22-spaghetti-and-meatballs"},"html":"<h1>Ingredients</h1>\n<ul>\n<li>Onion</li>\n<li>Garlic</li>\n<li>Chestnut mushrooms</li>\n<li>Meatballs or an alternative</li>\n<li>One can of chopped tomatoes</li>\n<li>Spinach</li>\n<li>Fresh chopped chillies</li>\n<li>Fresh rosemary</li>\n<li>Fresh basil</li>\n<li>Spaghetti pasta</li>\n<li>Salt and pepper to taste</li>\n<li>Garlic bread on side</li>\n</ul>","excerpt":"Ingredients Onion Garlic Chestnut mushrooms Meatballs or an alternative One can of chopped tomatoes Spinach Fresh chopped chillies Fresh…"}},{"node":{"id":"a5e43b20-ddc5-5faf-82d8-ceb3793a82c6","frontmatter":{"title":"Mushroom and Asparagus Risotto Ⓥ","date":"July 20, 2020"},"fields":{"slug":"2020-07-28-mushroom-risotto"},"html":"<h2>Ingredients</h2>\n<h3>Vegetables</h3>\n<ul>\n<li>Onion</li>\n<li>Garlic</li>\n<li>Ginger</li>\n<li>Chestnut mushrooms</li>\n<li>Asparagus</li>\n<li>Spinach</li>\n</ul>\n<h3>Sauces/Stock</h3>\n<ul>\n<li>White wine</li>\n<li>Vegetable stock</li>\n</ul>\n<h3>Starch</h3>\n<ul>\n<li>Risotto rice</li>\n</ul>\n<h3>Seasoning</h3>\n<ul>\n<li>Salt and pepper to taste</li>\n<li>Fresh rosemary</li>\n<li>Fresh basil</li>\n</ul>","excerpt":"Ingredients Vegetables Onion Garlic Ginger Chestnut mushrooms Asparagus Spinach Sauces/Stock White wine Vegetable stock Starch Risotto rice…"}},{"node":{"id":"fc57fcb4-e5a1-5f1f-aaf2-a3f6294b4d97","frontmatter":{"title":"Tomorrow Is a State of Mind","date":"July 18, 2019"},"fields":{"slug":"2019-07-18-tommorrow-is-a-state-of-mind"},"html":"<ul>\n<li>\n<p>People often say I'll do it tomorrow, but they don't mean the next date/day</p>\n</li>\n<li>\n<p>Tomorrow is simply saying I will not do it now</p>\n</li>\n<li>\n<p>Can end up in a perpetual cycle of \"I'll start it tomorrow\"</p>\n</li>\n<li>\n<p>All is does it put things off, it is procrastination</p>\n</li>\n</ul>","excerpt":"People often say I'll do it tomorrow, but they don't mean the next date/day Tomorrow is simply saying I will not do it now Can end up in a…"}},{"node":{"id":"28ed6dd8-86ce-5882-b848-5abdfe13f4cc","frontmatter":{"title":"Addiction Through Habit","date":"June 25, 2019"},"fields":{"slug":"2019-06-25-addiction-through-habit"},"html":"<ul>\n<li>Habit cycle image here</li>\n<li>Spoiling yourself, I enjoy a diet coke a hell of a lot more if I have one per week than one per day</li>\n<li>Getting used to not being productive makes the switch harder</li>\n</ul>","excerpt":"Habit cycle image here Spoiling yourself, I enjoy a diet coke a hell of a lot more if I have one per week than one per day Getting used to…"}},{"node":{"id":"eb5310a6-c992-5500-8b93-933beaefa8e8","frontmatter":{"title":"Simple Changes for a Happier Mind","date":"June 15, 2019"},"fields":{"slug":"2019-06-15-changes-for-a-happier-mind"},"html":"<ul>\n<li>Tech off two hours before sleeping</li>\n<li>Mindless browsing of reddit/twitter etc</li>\n<li>Take time to get to know yourself</li>\n<li>Meditate</li>\n<li>In our current age, our brains want constant stimuli, we want to be occupied. We can chose to occupy ourselves with long-term positives.</li>\n</ul>","excerpt":"Tech off two hours before sleeping Mindless browsing of reddit/twitter etc Take time to get to know yourself Meditate In our current age…"}},{"node":{"id":"463b328c-edac-5091-b8df-b80687cec8e8","frontmatter":{"title":"Cultivating Good Habits","date":"June 14, 2019"},"fields":{"slug":"2019-06-13-cultivating-good-habits"},"html":"<p>In this blog post I want to talk about <em>habits</em>.</p>","excerpt":"In this blog post I want to talk about habits."}},{"node":{"id":"330a9dc8-0b62-512c-a93f-5433f1f5aeeb","frontmatter":{"title":"Rain Is Necessary","date":"June 07, 2019"},"fields":{"slug":"2019-06-07-rain-is-necessary"},"html":"<p>I am reminded of a popular quote:</p>\n<blockquote>\n<p>To appreciate the sun, you gotta know what rain is</p>\n</blockquote>\n<p>This is present in lyrics from rapper J. Cole, although I'm not sure if the original thought could be attributed to him.</p>\n<p>Humans are their own worst enemy, it is so easy for us to fall into destructive behaviours. Today I want to talk about spoiling ourselves.</p>","excerpt":"I am reminded of a popular quote: To appreciate the sun, you gotta know what rain is This is present in lyrics from rapper J. Cole, although…"}},{"node":{"id":"37246f7a-d181-57e0-b4be-0b6296316f36","frontmatter":{"title":"Moods and Their Resulting Outlooks","date":"June 02, 2019"},"fields":{"slug":"2019-06-02-moods-and-outlooks"},"html":"<p>Your mood can have a huge affect on the lens you view your life through.</p>","excerpt":"Your mood can have a huge affect on the lens you view your life through."}},{"node":{"id":"b9afc46d-9169-5312-b4cf-617e57b53a78","frontmatter":{"title":"What Is Failure?","date":"May 27, 2019"},"fields":{"slug":"2019-05-27-what-is-failure"},"html":"<p>Fear of failure. \"What if I fall? But what if you fly?\"</p>","excerpt":"Fear of failure. \"What if I fall? But what if you fly?\""}},{"node":{"id":"c01aa4b0-dfef-5409-a16f-3fffcf5d200b","frontmatter":{"title":"Procrastination","date":"May 20, 2019"},"fields":{"slug":"2019-05-20-procrastination"},"html":"<p>We all have our own reasons for procrastination.</p>","excerpt":"We all have our own reasons for procrastination."}},{"node":{"id":"2a648dfd-85eb-51ae-b2c0-8e44d4f458ee","frontmatter":{"title":"Talking to Yourself","date":"May 13, 2019"},"fields":{"slug":"2019-05-13-talking-to-yourself"},"html":"<p>Talking to yourself may be considered an odd behaviour to have, however it gives us a way to understand who we are and how our mind works.</p>\n<p>Self-talk must be positive and supportive, never belittling or berating.</p>","excerpt":"Talking to yourself may be considered an odd behaviour to have, however it gives us a way to understand who we are and how our mind works…"}},{"node":{"id":"cec0959e-542e-52c5-b217-9768ddadcef3","frontmatter":{"title":"A Word on Effort","date":"May 04, 2019"},"fields":{"slug":"2019-05-04-a-word-on-effort"},"html":"<p>Effort. This can be the difference between satisfaction for an achievement, or a sense of fraud (or even <em>imposter syndrome</em>).</p>\n<p>My relationship with effort throughout my life has never been brilliant. From late primary school (think year 5 or 6) it was never <em>cool</em> to try hard with schoolwork.\nThis carried on throughout secondary school where I always put in the minimum amount of effort I could to stay in the top classes and in doing so, developed an extremely poor work ethic.</p>\n<p>Homework due on a day would be completed either in the hours before I slept the day before, or even during the beginning of the lesson it was due for.</p>\n<p>I believe this was a result of being able to do well without much effort and also because the majority of friends I had during secondary school were not academic and I had an easier life not being seen as a <strong>nerd</strong>.\nThis led to me leaving exam revision until a day or so before the exam. Doing this I had no stress or worries until the final moments, where I would be fuelled entirely by anxiety and a fear of failure.</p>\n<p>Years later I have realised that while I may have believed I was doing this for the above reasons, it was really because I'd never once tried my absolute best. It is truly terrifying to me to put my all into something and not being as good as I believe I should be at it.</p>\n<p>Over years it seems I developed an extremely unhealthy view on both effort and intelligence, this being that if I am a smart person, I shouldn't need to expend any effort in learning. Now that I am at university this view and my poor work ethic have made things very difficult for me.\nBefore university level I could get away with doing relatively little work and still do well, but degree level content is <em>designed to be challenging</em>, otherwise what's the point of paying so much money?</p>\n<p>A side effect of this mentality was that I would feel a sense of fraud with my achievements, as I never felt like I had put my all into anything, I didn't feel as though I deserved the accomplishments, that I was a fraud. Life passed by without any hardships or struggles academically, without me developing good lifelong habits.</p>\n<p>Unfortunately the beliefs my schoolteachers enforced were that grades were the only important thing, not learning useful things and enjoying the process. This killed the enjoyment of learning for me and was likely partly responsible for my immense fear of failure. I never felt as though I was at school to learn things I enjoy, just to pass exams.</p>\n<p>Ultimately I felt that I was not there to learn because I wanted to learn, I felt to so pressured to do well in exams that I could never <strong>enjoy</strong> studying, it was something I hated because of the anxiety it gave rise to. As I am right now, this has resulted in me being afraid of difficult content, even though I have a desire to learn it.</p>","excerpt":"Effort. This can be the difference between satisfaction for an achievement, or a sense of fraud (or even imposter syndrome). My relationship…"}},{"node":{"id":"abeb44cc-2287-5ebb-b191-0b4dacb7af01","frontmatter":{"title":"How I Created This Blog","date":"April 19, 2019"},"fields":{"slug":"2019-04-19-how-i-made-this"},"html":"<p>I created this blog using <em>Jekyll</em>, which is a static site generator.\nAs this site is hosted using GitHub's <em>pages</em> (which only allows for static content), this was the perfect solution for me.</p>\n<h1>Prerequisites</h1>\n<ul>\n<li>Ruby (<a href=\"https://www.ruby-lang.org/en/documentation/installation/\">install instructions</a>)</li>\n<li>Jekyll and it's bundler\n<ul>\n<li><code>gem jekyll bundler</code></li>\n</ul>\n</li>\n</ul>\n<h1>Setting up a repo</h1>\n<ul>\n<li>Create a new GitHub repo where the blog's source files will be kept</li>\n<li>Enable GitHub pages in settings</li>\n<li>By default the URL for the blog will be <em>username</em>.github.io/<em>repo_name</em>/</li>\n</ul>\n<h1>Creating a new Jekyll site</h1>\n<p>Creating a default Jekyll website is as easy as running <code>jekyll new mypagename</code></p>\n<p>Once ran, navigate to this new directory and you will see the following structure:</p>\n<deckgo-highlight-code  theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">mypagename\n├── _config.yml\n├── _posts\n|   ├── 2007-10-29-why-every-programmer-should-play-nethack.md\n|   └── 2009-04-26-barcamp-boston-4-roundup.md\n├── _site\n├── index.md\n├── about.md\n└── 404.md</code>\n        </deckgo-highlight-code>\n<p>To generate the Jekyll website (and start up the Jekyll server), run <code>jekyll serve --watch</code> in the site's root folder.<br>\nThe local version of the website can be accessed at <code>localhost:4000</code></p>\n<p>The <code>_config.yml</code> file is the main file used to configure the Jekyll site, open it up to change things like the title, description and URL.\nLuckily when Jekyll generates this file, it comments plenty of instructions on how to use the file, have fun and play around with it!</p>\n<p><strong>Note:</strong> when changes are made to the config file, the server must be restarted to reflect the changes.</p>\n<p>Each <em>page</em> of the site corresponds to a <strong>markdown</strong> file, <code>index.md</code> being the home page and other markdown files such as <code>about.md</code> are other pages on the site.</p>\n<h1>Adding Pages</h1>\n<p>Adding a new page to the site is as simple as creating a new markdown file in the site's root.</p>\n<p>Add a bit of configuration in the header like below:</p>\n<deckgo-highlight-code  theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">---\nlayout: page\ntitle: About\npermalink: /about/\n---</code>\n        </deckgo-highlight-code>\n<p>Then simply write the content of the page in markdown.</p>\n<h1>Adding Posts</h1>\n<p>Adding new blog posts using Jekyll is just as easy, create a new markdown file with the following naming convention: <code>YYYY-MM-DD-title-of-post.md</code> inside the <code>_posts</code> folder.</p>\n<p>Again add some header information, I recommend including the date for easy tracking of posts.</p>\n<deckgo-highlight-code  theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">---\nlayout: post\ntitle:  &quot;How I Created this Blog&quot;\ndate:   2019-04-19 17:05:00 +0100\n---</code>\n        </deckgo-highlight-code>\n<p>And finish the rest of the file by writing content in markdown.</p>\n<h1>Going Further</h1>\n<p>These instructions will give you a very simple introduction to using Jekyll as a blog platform, there are many ways to go further with it such as customising styles, layouts, etc.</p>\n<p>To get it working with GitHub's pages, run <code>jekyll build</code> and copy the contents of <code>_site</code> to the root of the repo.<br>\nAlternatively, use the contents of the folder generated by <code>jekyll new mypagename</code> as the root of the repo.</p>","excerpt":"I created this blog using Jekyll, which is a static site generator.\nAs this site is hosted using GitHub's pages (which only allows for…"}}]}}}