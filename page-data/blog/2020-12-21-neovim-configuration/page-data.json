{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2020-12-21-neovim-configuration",
    "result": {"data":{"markdownRemark":{"frontmatter":{"title":"Neovim Configuration","date":"December 21, 2020"},"html":"<h1>Pre-installation:</h1>\n<ul>\n<li>My choice of terminal on my M1 Macbook Air is <code>iTerm2</code></li>\n<li>In iTerm2 go to Preferences > General > Selection and activate <code>Allow terminal applications to access clipboard</code></li>\n<li>In iTerm2 go to Preferences > Profile > Keys and toggle set the left option key to to <code>Esc+</code>\n<ul>\n<li>This is used for my window navigation keybindings that use the Mac option key</li>\n</ul>\n</li>\n</ul>\n<h1>Pre-Installation</h1>\n<ul>\n<li><code>node.js</code> is required for <code>CoC</code></li>\n<li><code>pip install pynvim --upgrade</code></li>\n</ul>\n<h1>Installation</h1>\n<ul>\n<li>Install <strong>neovim</strong>\n<ul>\n<li><code>brew install neovim</code></li>\n</ul>\n</li>\n<li>It is worth installing <strong>node's</strong> <code>neovim</code> package with <code>npm install -g neovim</code> if you will be working with it</li>\n<li>Install a <strong>vim</strong> plugin manager, I use <code>vim-plug</code> which can be installed with:\n<deckgo-highlight-code language=\"bash\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">sh -c &#39;curl -fLo &quot;${XDG_DATA_HOME:-$HOME/.local/share}&quot;/nvim/site/autoload/plug.vim --create-dirs \\\n  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#39;</code>\n        </deckgo-highlight-code>\n</li>\n<li>Open up the <strong>neovim</strong> config file at <code>~/.config/nvim/init.vim</code>\n<ul>\n<li>Set up the plugin section by adding</li>\n</ul>\n<deckgo-highlight-code  theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">call plug#begin(&quot;~/.vim/plugged&quot;)\n&quot; Plugin Section\ncall plug#end()</code>\n        </deckgo-highlight-code>\n<ul>\n<li>Configuring the <code>init.vim</code> file is outside of the scope of this post, my configuration will be dissected in another</li>\n<li>When new plugins have been installed run the command <code>nvim +PlugInstall</code> from the terminal shell</li>\n</ul>\n</li>\n</ul>\n<h2>Plugins</h2>\n<h1>Airline</h1>\n<ul>\n<li>To get a great looking status bar showing important information inside nvim, you can install the <code>vim-airline</code> plugin</li>\n<li>Add <code>Plug 'vim-airline/vim-airline-themes'</code> to your nvim config\n<ul>\n<li>This is highly configurable and often configured to your preference</li>\n</ul>\n</li>\n</ul>\n<h1>VimTex</h1>\n<ul>\n<li><strong>Vim-Airline's</strong> <code>vimtex</code> plugin word count is not accurate\n<ul>\n<li>A better word count is provided by <code>vimtex</code> itself, I run the <code>VimtexCountWords</code> command on every file save of a <code>.tex</code> file via my config file</li>\n</ul>\n</li>\n</ul>\n<h1>CoC</h1>\n<ul>\n<li>For autocompletion I use a plugin called <code>coc.nvim</code> which stands for <strong>Conquerer of Completion</strong></li>\n<li>CoC requires <strong>node.js</strong> to be installed, this can be done with:</li>\n</ul>\n<p><code>curl -sL install-node.now.sh/release | bash</code></p>\n<ul>\n<li>Install CoC by adding <code>Plug 'neoclide/coc.nvim', {'branch': 'release'}</code> to the plugin section of your nvim config</li>\n</ul>\n<h1>CoC Completion</h1>\n<ul>\n<li>In order to use CoC completion, you also need a Language Server for each filetype you want completion for</li>\n<li>To install a language server, run <code>:CocInstall</code> and the name of the server you want</li>\n<li>For example: I autocomplete Python files using <code>coc-python</code>, which I installed by running:</li>\n</ul>\n<p><code>:CocInstall coc-python</code> <em>inside</em> <strong>neovim</strong></p>\n<ul>\n<li><code>coc-pyright</code> is more up to date (<code>coc-python</code>) is archived, but it does not have method definitions (function documentation)</li>\n<li>I use my own forked version of <code>coc-python</code> that removes the annoying Python interpreter name in the status bar</li>\n</ul>\n<h1>CoC Linting</h1>\n<ul>\n<li>CoC also allows for <em>linting</em>, the checking of programmatic and stylistic errors in your code\n<ul>\n<li>Uses <code>pylint</code> by default, I installed <code>flake8</code> through <code>pip</code> instead</li>\n</ul>\n</li>\n<li>I needed to show <strong>nvim</strong> where my Python3 binary was installed (I use <code>Pyenv</code>) for linting to work, by adding the line <code>let g:python3_host_prog = '/Users/rnash/.pyenv/shims/python'</code> to my config file</li>\n<li>Import errors appear when editing a file that I am not in the directory of! <code>cd</code> to the folder containing them and no errors are shown\n<ul>\n<li>I.e. if I define a stack class in <code>stack.py</code> and implement a stack with some operations in <code>stack_impl.py</code> in the same folder, an <code>missingImportError</code> is reported unless I am in the directory containing these files</li>\n</ul>\n</li>\n</ul>\n<h1>CoC Formatting</h1>\n<ul>\n<li>When editing Python code I find it is easier to maintain through the use of a <em>formatter</em>, this is a tool that automatically indents and spaces out code according to a style of your choosing</li>\n<li>My choice of formatter for Python is called <code>black</code> and can be installed by running <code>pip install black</code>\n<ul>\n<li>Note that it may be better practice to install this on a per user basis by omitting <code>sudo</code> and adding the <code>--user</code> flag</li>\n<li>There are some stylistic choices for code structure I prefer over what <code>black</code> uses, it is worth finding a formatter you like</li>\n</ul>\n</li>\n</ul>\n<h1>coc-settings.json</h1>\n<ul>\n<li>For all of these <strong>CoC</strong> options to work, I needed to add the following lines to my CoC configuration file, located at <code>/.config/nvim/coc-settings.json</code></li>\n</ul>\n<deckgo-highlight-code language=\"json\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">{\n  &quot;python.jediEnabled&quot;: false,\n  &quot;python.hideInterpreterName&quot;: true,\n  &quot;python.analysis.diagnosticEnabled&quot;: true,\n  &quot;python.linting.enabled&quot;: true,\n  &quot;python.linting.pylintEnabled&quot;: false,\n  &quot;python.linting.flake8Enabled&quot;: true,\n  &quot;python.formatting.provider&quot;: &quot;black&quot;,\n  &quot;python.formatting.blackPath&quot;: &quot;/Users/rnash/.pyenv/shims/black&quot;,\n  &quot;python.formatting.blackArgs&quot;: [&quot;--line-length&quot;, &quot;90&quot;],\n  &quot;coc.preferences.formatOnType&quot;: true,\n  &quot;coc.preferences.formatOnSaveFiletypes&quot;: [&quot;python&quot;]\n}</code>\n        </deckgo-highlight-code>\n<h1>Syntax Highlighting</h1>\n<ul>\n<li>For some reason <code>coc-python</code> does not work with <code>coc-highlight</code>, instead I use the plugin <code>semshi</code> for Python syntax highlighting</li>\n<li>Installed via: <code>Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}</code></li>\n<li>Semshi color scheme is not great with Solarized</li>\n</ul>\n<h1>Notes</h1>\n<ul>\n<li>Running python files from within Neovim's terminal (using <code>:w !Python %</code> etc) does not work for parsing input - EOF error\n<ul>\n<li>Instead use the <code>te</code> command, e.g. <code>:te python my_file.py</code></li>\n</ul>\n</li>\n<li>I am happy with my current <code>nvim</code> setup but it has required a lot of troubleshooting and it requires a deprecated plugin for <code>CoC</code>, I have been able to achieve the same functionality in VSCode without the headaches which I will document in another post.</li>\n</ul>"}},"pageContext":{"slug":"2020-12-21-neovim-configuration"}},
    "staticQueryHashes": ["3159585216","440568431"]}