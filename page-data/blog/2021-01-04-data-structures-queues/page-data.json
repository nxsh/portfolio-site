{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2021-01-04-data-structures-queues",
    "result": {"data":{"markdownRemark":{"frontmatter":{"title":"Data Structures Part II - Queues","date":"January 04, 2021"},"html":"<h1>What is a Queue?</h1>\n<p>A queue is another <em>abstract data type</em> built upon the <em>array</em> data structure.</p>\n<p>A queue stores items in a First-In -> First-Out manner, commonly referred to as FIFO.</p>\n<p>The 'head' is the first element (oldest), the 'tail' is the last element (most recent).</p>\n<h1>Example of a Queue</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">friend_names = [&#39;Ryan&#39;, &#39;Charlie&#39;, &#39;Sean&#39;, &#39;Kyle&#39;]\n\n[0] = &#39;Ryan&#39; #(head) \n\n[4] = &#39;Kyle&#39; #(tail)</code>\n        </deckgo-highlight-code>\n<h1>Methods of a Queue</h1>\n<ul>\n<li><code>enqueue(item)</code> - add an element to the tail of the queue</li>\n<li><code>dequeue()</code> - remove (return) the head element of the queue</li>\n</ul>\n<h1>Queue Class Definition in Python</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">class Queue:\n    def __init__(self):\n        self.items = []\n\n    def enqueue(self, item):\n        self.items.append(item)\n\n    def dequeue(self):\n        self.items.pop(0)\n\n    def peek(self):\n        return self.items[0]  # view first item (front of queue)\n</code>\n        </deckgo-highlight-code>\n<h1>Queue Implementation</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">q = Queue()  # create a new Stack\n\nq.enqueue(&#39;a&#39;)\nq.enqueue(&#39;b&#39;)\nq.enqueue(&#39;c&#39;)\nq.enqueue(&#39;d&#39;)\n\nprint(&quot;Top is:&quot;, q.peek(), &quot;\\n&quot;)  # &#39;a&#39; \nq.dequeue() \n\nprint(&quot;Top is:&quot;, q.peek(), &quot;\\n&quot;)  # &#39;b&#39;\nq.dequeue() \n\nq.enqueue(&#39;e&#39;)\n\n# q = [&#39;c&#39;,&#39;d&#39;,&#39;e&#39;]</code>\n        </deckgo-highlight-code>\n<h1>Why use a Queue?</h1>"}},"pageContext":{"slug":"2021-01-04-data-structures-queues"}},
    "staticQueryHashes": ["3159585216","440568431"]}