{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2021-02-07-data-structures-trees",
    "result": {"data":{"markdownRemark":{"frontmatter":{"title":"Data Structures Part IV - Trees","date":"February 07, 2021"},"html":"<h1>What is a Tree?</h1>\n<ul>\n<li>A tree is another <em>abstract data type</em></li>\n<li>Similar to a <em>linked list</em> it is a collection of nodes, however a tree is a <em>non-linear</em> abstract data type\n<ul>\n<li>This means the data is not stored sequentially</li>\n</ul>\n</li>\n<li>In general, a tree has a <em>root node</em>, which then has <em>child nodes</em></li>\n<li>The nodes are connected by <em>edges</em></li>\n<li>The value (or data) of a node is known as a <em>key</em></li>\n</ul>\n<p><img src=\"https://miro.medium.com/max/975/1*PWJiwTxRdQy8A_Y0hAv5Eg.png\" alt=\"\"></p>\n<h1>Tree Class Definition in Python</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">class Tree:\n    def __init__(self, data=None):\n        self.left = None\n        self.right = None\n        self.data = data</code>\n        </deckgo-highlight-code>\n<ul>\n<li>The above tree class is a <em>binary tree</em>, where each node has only a left pointer or right pointer\n<ul>\n<li>A binary tree is one where each node has <strong>two</strong> child nodes at most</li>\n</ul>\n</li>\n</ul>\n<h1>Tree Implementation</h1>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\"># Recursive count node function\ndef count_all(node):\n    return 1 + count_all(node.left) + count_all(node.right) if node else 0\n\n# Implementing node class to form a tree\nroot = Tree()\n\nroot.data = 4\nroot.data = &quot;root&quot;\n\nroot.left = Tree()\nroot.left.data = &quot;left&quot;\n\nroot.right = Tree()\nroot.right.data = &quot;right&quot;\n\nprint(count_all(root))</code>\n        </deckgo-highlight-code>\n<h1>Why use a Tree?</h1>"}},"pageContext":{"slug":"2021-02-07-data-structures-trees"}},
    "staticQueryHashes": ["3159585216","440568431"]}