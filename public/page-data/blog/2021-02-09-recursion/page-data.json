{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/2021-02-09-recursion",
    "result": {"data":{"markdownRemark":{"frontmatter":{"title":"Understanding Recursion","date":"February 09, 2021"},"html":"<h1>What is Recursion?</h1>\n<p>Recursion is a computing term that is surprisingly difficult to find a definition for. Putting it as simply as I can, a <em>recursive function</em> is one that calls itself until it achieves its desired output.</p>\n<p>It is also surprisingly difficult to wrap your head around, I know it was for me. Visualizing the <em>call stack</em> of recursive functions is difficult to do in your head.</p>\n<h1>Recursive Array Sum</h1>\n<p>Below is a recursive <code>python</code> function to sum a given array:</p>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">def recursiveSum(arr):\n    if (len(arr)) == 1:\n        return arr[0]\n    else:\n        return arr[0]+recursiveSum(arr[1:])\n        # myArr[1:] = 2,3,4 (index 1 onwards)\n\nmyArr = [1,2,3,4]\nprint(recursiveSum(myArr)) # 10\nprint(myArr[0:]) # prints whole array</code>\n        </deckgo-highlight-code>\n<p>Let's walk through this function's execution:</p>\n<ol>\n<li>Return 1 + sum([2,3,4])</li>\n<li>Return 1 + 2 + sum([3,4])</li>\n<li>Return 1 + 2 + 3 + sum([4])</li>\n<li>Return 1 + 2 + 3 + 4</li>\n</ol>\n<p>On this last line, the 4 is added through the exit condition of <code>len(arr) == 1</code></p>\n<p>By doing an addition operation in the function return, the return value of each recursive call of the function is <em>added</em> to the final function return</p>\n<h1>Factorial</h1>\n<p>Now let's look at an example of a recursive function to calculate a number's factorial:</p>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">def getFact(n):\n    if n == 1:\n        return n \n    return n * getFact(n-1)\n    # if n=5, return 5 * 4 * 3 * 2 * 1\n\nnum = 5\nprint(getFact(num)) # 120</code>\n        </deckgo-highlight-code>\n<p>Here is an animation that steps through a recursive factorial function:</p>\n<p><img src=\"https://i2.wp.com/blog.codeanalogies.com/wp-content/uploads/2020/01/recursionGIFsfactorialnum2.gif?resize=720%2C540&#x26;ssl=1\" alt=\"\"></p>\n<h1>Strings</h1>\n<p>Finally, let's end with a recursive string reverse function:</p>\n<deckgo-highlight-code language=\"python\" theme=\"nord\" line-numbers=\"true\"  >\n          <code slot=\"code\">def reverse(string):\n    print(string)\n    if string == &quot;&quot;:\n        return string\n    else:\n        return reverse(string[1:]) + string[0]\n        # call reverse on string starting from 2nd element, plus first element\n\ns = &quot;hello&quot;\nreverse(s) # &#39;olleh&#39;</code>\n        </deckgo-highlight-code>\n<br>\n<table>\n<thead>\n<tr>\n<th>Call</th>\n<th>string</th>\n<th>s[0]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>reverse('hello')</td>\n<td>s = hello</td>\n<td>s[0] = h</td>\n</tr>\n<tr>\n<td>=reverse('ello') + 'h'</td>\n<td>s[1:] = ello</td>\n<td>s[0] = e</td>\n</tr>\n<tr>\n<td>=reverse('llo') + 'e' + 'h'</td>\n<td>s[1:] = llo</td>\n<td>s[0] = l</td>\n</tr>\n<tr>\n<td>=reverse('lo') + 'l' + 'e' + 'h'</td>\n<td>s[1:] = lo</td>\n<td>s[0] = l</td>\n</tr>\n<tr>\n<td>=reverse('o') + 'l' + 'l' + 'e' + 'h'</td>\n<td>s[1:] = o</td>\n<td>s[0] = o</td>\n</tr>\n<tr>\n<td>=reverse(\"\") + 'o' + 'l' + 'l' + 'e' + 'h'</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Return 'olleh'</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Note that recursion isn't always the best solution, the string reverse function could be written simply as: <code>print(s[::-1])</code></p>"}},"pageContext":{"slug":"2021-02-09-recursion"}},
    "staticQueryHashes": ["3159585216","440568431"]}